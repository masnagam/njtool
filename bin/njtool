#!/usr/bin/env node

// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const fs = require('fs');
const path = require('path');
const program = require('caporal');
const streamToString = require('stream-to-string');

const packageJson = require('../package.json');
const Journal = require('..').Journal;
const Downloader = require('..').Downloader;

program
  .version(packageJson.version)
  .description(packageJson.description);

program
  .command('scrape',
           'Scrape metadata in journal pages, and output as JSON')
  .option('--show-window', 'Show the browser window for debugging',
          program.BOOLEAN, false)
  .argument('<journals...>',
            'List of journal IDs represented as <name>:<volume>:<issue>',
            Journal.from)
  .action(async (args, options, logger) => {
    const journals = await Promise.all(args.journals.map(async (journal) => {
      return await journal.scrape(options);
    }));
    console.log(JSON.stringify(journals));
  });

program
  .command('download',
           'Download PDF files of articles')
  .option('-u, --username <username>',
          'Username',
          program.STRING, undefined, true)
  .option('-p, --password <password>',
          'Password',
          program.STRING, undefined, true)
  .option('-o, --outdir <path-to-dir>',
          'Path to the output dir',
          (value) => {
            const outdir = path.resolve(process.cwd(), value);
            if (!fs.existsSync(outdir)) {
              throw new Error(`No such directory: ${outdir}`);
            }
            return outdir;
          }, undefined, true)
  .option('--retry <num>',
          'Retry <num> times if failed to download a PDF file',
          program.INTEGER, 8)
  .option('--retry-interval <sec>',
          'Retry interval time in seconds',
          program.INTEGER, 10)
  .option('--timeout <sec>',
          'Maximum time in seconds allowed for downloading a PDF file',
          program.INTEGER, 300)
  .option('--sleep <sec>',
          'Time in seconds to sleep between article downloads',
          program.INTEGER, 30)
  .option('--show-window',
          'Show the browser window for debugging',
          program.BOOLEAN, false)
  .action(async (args, options, logger) => {
    const journals = JSON.parse(
      await streamToString(process.stdin)
    ).filter((journal) => journal.error === undefined);
    const downloader = new Downloader(options, logger);
    process.on('SIGINT', () => {  // Ctrl-C
      if (downloader) {
        downloader.abort();
      } else {
        process.exit(1);
      }
    });
    return await downloader.download(journals);
  });

program.parse(process.argv);
